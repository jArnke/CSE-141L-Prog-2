0 0000 0000 // BEGIN:
0 0000 0001 //   CLR ACC //Set ACC and MEM to zero
0 0000 0010 //   CLR MEM
0 0000 0000 // CHECK_SPACE:
0 0001 0100 //   LDM // Read in the value where MEM is pointing [0] to ACC
0 0111 1000 //   XOR IMM 0x20
0 0010 0000 //   IMM 0x20
0 0000 1000 //   CMP
1 1001 0000 // BZ: INC_SPACE
0 0000 0011 //   OFFSET +3
1 0000 0000 // BR: COPY_TO_BEG_FIRST
0 0000 0110 //   OFFSET +6
0 0000 0000 // INC_SPACE: // Label for instruction, increment loop looking for first non-space
0 0011 1000 //   ADM 1// Add to count of how many characters have been read
0 0000 0001 //   IMM 1
1 0000 0000 // BR: CHECK_SPACE
0 1111 0011 //   OFFSET -15
0 0000 0000 // COPY_TO_BEG_FIRST: // Undoes 0x20 check before beginning to copy the message
0 0111 1000 //   XOR IMM 0x20
0 0010 0000 //   IMM 0x20
0 0000 1101 //   STRR [64] // Since we won't be using the spaces from [64] onwards, we can store our distance from zero in this space in memory
1 0100 0000 //   TARGET 64
0 0000 1101 //   STRR [65] // We can store the last address we read in here
1 0100 0001 //   TARGET 65
0 0000 0000 // COPY_TO_BEG:
0 0000 0001 //   CLR ACC
0 0000 0010 //   CLR MEM
0 0001 0100 //   ADM [65]
1 0100 0001 //   OFFSET 65
0 0000 0110 //   LDR
1 0000 0000 // B: CNT_COPY_BEG
0 0000 0100 // OFFSET +4
0 0000 0000 // LOAD_SPACE:
0 0001 1000 //   ADD 0x20
0 0010 0000 //   IMM 0x20
0 0000 0000 // CNT_COPY_BEG:
0 0001 0100 //   ADM [65]
1 0100 0001 //   OFFSET 65
0 1010 0000 //   SBM [64] // Get address at the beginning to read message to
1 0100 0000 //   OFFSET 64
0 0000 1101 //   STRM // Saves value in ACC to the value in MEM
0 0000 0001 //   CLR ACC
0 0001 1000 //   ADD IMM 1
1 0000 0001 //   IMM 1
0 0001 0100 //   ADD [65]
1 0100 0001 //   OFFSET 65
0 0011 0000 //   ADM     // Move number of current message to MEM
0 0001 1000 //   ADD IMM 64
1 0100 0000 //   IMM 64
0 0000 1000 //   CMP
1 1110 0000 // BEQ: COPY_MSG_FIRST  // If we've finished copying messages 0-63
0 0000 0101 // OFFSET +5
0 0000 1101 //   STRR [65] // Saves address of next value to be read
1 0100 0001 //   TARGET 65
1 1000 0000 // BR: COPY_TO_BEG
0 1110 0001 // OFFSET -31
0 0000 0000 // COPY_MSG_FIRST:
0 0101 1000 //   AND IMM 0x80
1 1000 0000 //   IMM 0x80
0 0011 0000 //   ADM           // Put MSB in MEM
0 0001 0100 //   ADD [0]
1 0000 0000 //   TARGET 0
0 1000 0000 //   XORA          // Get parity of ACC
0 0101 0000 //   AND MEM       // AND parity and MSB of stored message
0 0000 1000 //   CMP
0 0000 0001 //   CLR ACC
0 0000 0010 //   CLR MEM
0 0001 0100 //   ADD [0]
1 0000 0000 //   TARGET 0
0 0011 0000 //   ADM
0 0000 0001 //   CLR ACC
0 0000 0000 // BEQ: MATCH_CPY_FIRST // If message matches parity, copy message
0 0001 1000 //   ADD IMM 0x80 
1 1000 0000 //   IMM 0x80             // Else, copy 0x80 to output
0 0011 1000 //   ADM 64
1 0100 0000 //   IMM 64
0 0000 0000 // MATCH_CPY_FIRST:
0 0000 1101 //   STRM
0 0000 0000 // COPY_MSG:
0 0000 0001 //   CLR ACC
0 0001 0100 //   ADD [0]
1 0000 0000 //   TARGET 0
0 0011 0000 //   ADM
0 0000 0110 //   LDR
0 0001 0100 //   SUB [0]
1 0000 0000 //   TARGET 0
0 1000 0000 //   XORA          // Get parity of ACC
0 0101 0000 //   AND MEM       // AND parity and MSB of stored message
0 0000 1000 //   CMP
0 0000 0001 //   CLR ACC
0 0000 0010 //   CLR MEM
0 0001 0100 //   ADD [0]
1 0000 0000 //   TARGET 0
0 0011 0000 //   ADM
0 0000 0110 //   LDR
0 0001 0100 //   SUB [0]
1 0000 0000 //   TARGET 0
1 1110 0000 // BEQ: MATCH_CPY // If message matches parity, copy message  
0 0000 0110 // OFFSET +6
0 0001 1000 //   ADD IMM 0x80 
1 1000 0000 //   IMM 0x80             // Else, copy 0x80 to output
0 0011 1000 //   ADM 64
1 0100 0000 //   IMM 64
0 0000 0000 // MATCH_CPY_FIRST:
0 0000 0000 // MATCH_CPY:
0 0000 1101 //   STRM
0 0001 1000 //   ADD IMM 1
1 0000 0001 //   IMM 1
0 0011 1000 //   ADM IMM 64
1 0100 0000 //   IMM 64
0 0000 1000 //   CMP
1 1110 0000 // BEQ: DONE_BR  // If we've finished copying messages 0-63
0 0000 0101 // OFFSET +5
0 0000 0010 //   CLR MEM
0 0000 1101 //   STRM [0] // Saves address of next value to be read
1 1000 0000 // BR: COPY_MSG
0 1101 1010 // OFFSET -38
0 0000 0000 // DONE_BR:
0 0000 1111 //   DONE